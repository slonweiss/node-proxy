AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: SAM Template for RealEyes AI Node.js Proxy Lambda

Globals:
  Function:
    Timeout: 30
    MemorySize: 128

Resources:
  NodeJsProxyFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: RealEyesAINodeJsProxy
      Handler: lambda.handler
      Runtime: nodejs20.x
      CodeUri: ./ # Directory containing your Lambda function code
      Description: Node.js Proxy for RealEyes AI
      Environment:
        Variables:
          S3_BUCKET: !Ref ImageBucket
          DYNAMODB_TABLE: !Ref CacheTable
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref ImageBucket
        - DynamoDBCrudPolicy:
            TableName: !Ref CacheTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /analyze-image
            Method: post

  ImageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: realeyes-ai-images

  CacheTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: RealEyesAICache
      AttributeDefinitions:
        - AttributeName: ImageHash
          AttributeType: S
        - AttributeName: PHash
          AttributeType: S
        - AttributeName: ThumbsUp
          AttributeType: N
        - AttributeName: ThumbsDown
          AttributeType: N
        - AttributeName: Feedback
          AttributeType: L
      KeySchema:
        - AttributeName: ImageHash
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: PHashIndex
          KeySchema:
            - AttributeName: PHash
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref NodeJsProxyFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ServerlessRestApi}/*/*/*"

  HandleImageFeedbackFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: HandleImageFeedback
      Handler: handleImageFeedback.handler
      Runtime: nodejs20.x
      CodeUri: ./
      Description: Handle image feedback submissions
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref CacheTable
          COMMENT_TABLE: !Ref CommentTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CacheTable
        - DynamoDBCrudPolicy:
            TableName: !Ref CommentTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /submit-feedback
            Method: post

  HandleImageFeedbackPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref HandleImageFeedbackFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ServerlessRestApi}/*/*/*"

  CommentTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: RealEyesAIComments
      AttributeDefinitions:
        - AttributeName: ImageHash
          AttributeType: S
        - AttributeName: CommentId
          AttributeType: S
      KeySchema:
        - AttributeName: ImageHash
          KeyType: HASH
        - AttributeName: CommentId
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST

  CloudFormationDeployRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CloudFormation-DeployLambdaRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: DynamoDBFullAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource: "*"
        - PolicyName: LambdaFullAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:*
                Resource: "*"
        - PolicyName: IAMFullAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - iam:*
                Resource: "*"

  # Add this new resource to explicitly define the API Gateway
  ServerlessRestApi:
    Type: AWS::Serverless::Api
    DeletionPolicy: Retain
    Properties:
      StageName: Prod
      # You can add more properties here if needed

Outputs:
  ApiUrl:
    Description: URL of the API endpoint
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/analyze-image"
